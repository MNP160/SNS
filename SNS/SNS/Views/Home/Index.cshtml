@model IEnumerable<Notification>
@{

    ViewData["Title"] = "Home Page";
}

<style>
    section {
        position:relative;
        display: flex;
        height: 0%;
        width:0%;
        background-color: lightblue;
        transition: ease-in-out 0.8s;
        display:flex;
        justify-content:center;
        align-items:center;
    }

    #hero {
        height: 60%;
        width: 80%;
       justify-content:space-evenly;
    }
    img {
        width: 50px;
        height: 50px;
        transition: ease-in-out 0.9s;
        justify-content: space-evenly;
    }
    #confetti{
        transition:ease-in 0.7s;
        position:absolute;
        overflow:hidden;
        top:0;
        left:0;
        justify-content:center;
        align-items:center;
        flex-direction:row;
    }
   
</style>

<div class="text-center">
    <section id="mySec">
        <div id="hero">
            <img id="myImg" src="~/css/index.jpg" />
            <h1 class="headline">Welcome to SNS</h1>
            <canvas id="confetti"></canvas>

        </div>
    </section>
</div>


<table class="table table-striped">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Subject)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Department)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Severity)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Subject)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Department)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Severity)
            </td>
        </tr>
        }
    </tbody>
</table>



<script>
    let myImg = document.getElementById("myImg"); 
    let mySec = document.getElementById("mySec");

function growImage() {
  myImg.style.width =  "900px";
  myImg.style.height = "200px";
    }
    function backgroundExpand() {
        mySec.style.width = "180vh";
        mySec.style.height = "80vh";
    }
    window.onload = backgroundExpand;

    setTimeout(growImage, 1000)

let canvas = document.getElementById('confetti');

canvas.width = 1120;
canvas.height = 500;

let ctx = canvas.getContext('2d');
let pieces = [];
let numberOfPieces = 50;
let lastUpdateTime = Date.now();

function randomColor () {
    let colors = ['#f00', '#0f0', '#00f', '#0ff', '#f0f', '#ff0'];
    return colors[Math.floor(Math.random() * colors.length)];
}

function update () {
    let now = Date.now(),
        dt = now - lastUpdateTime;

    for (let i = pieces.length - 1; i >= 0; i--) {
        let p = pieces[i];

        if (p.y > canvas.height) {
            pieces.splice(i, 1);
            continue;
        }

        p.y += p.gravity * dt;
        p.rotation += p.rotationSpeed * dt;
    }


    while (pieces.length < numberOfPieces) {
        pieces.push(new Piece(Math.random() * canvas.width, -20));
    }

    lastUpdateTime = now;

    setTimeout(update, 1);
}

function draw () {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    pieces.forEach(function (p) {
        ctx.save();

        ctx.fillStyle = p.color;

        ctx.translate(p.x + p.size / 2, p.y + p.size / 2);
        ctx.rotate(p.rotation);

        ctx.fillRect(-p.size / 2, -p.size / 2, p.size, p.size);

        ctx.restore();
    });

    requestAnimationFrame(draw);
}

function Piece (x, y) {
    this.x = x;
    this.y = y;
    this.size = (Math.random() * 0.5 + 0.75) * 15;
    this.gravity = (Math.random() * 0.5 + 0.75) * 0.1;
    this.rotation = (Math.PI * 2) * Math.random();
    this.rotationSpeed = (Math.PI * 2) * (Math.random() - 0.5) * 0.001;
    this.color = randomColor();
}

while (pieces.length < numberOfPieces) {
    pieces.push(new Piece(Math.random() * canvas.width, Math.random() * canvas.height));
}
   
    update();
    setTimeout(draw, 2000)
//draw();

</script>


